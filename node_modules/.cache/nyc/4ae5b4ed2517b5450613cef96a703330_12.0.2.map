{"version":3,"sources":["validatorSpec.js"],"names":["expect","chai","use","chaiHttp","describe","redFlagValidator","beforeEach","done","RedFlagValidator","it","testForCreatedBy","passing","to","equal","errMessage","testForType","testForLocation","testForStatus","testForImages","testForVideos","testForComment","resetValid","incidents","createdBy","type","location","status","images","videos","comment","testForEmptyStringInput"],"mappings":"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","file":"validatorSpec.js","sourceRoot":"/home/dubby/Documents/andelaBootcamp/iReporter/iReporter/dummyApi/tests","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport {\n  RedFlagValidator\n} from '../Helpers/validateRedFlag';\n\nconst {\n  expect\n} = chai;\n\nchai.use(chaiHttp);\n\ndescribe('Validate red-flag input', () => {\n  let redFlagValidator;\n  beforeEach((done) => {\n    redFlagValidator = new RedFlagValidator();\n    done();\n  });\n  it('should validate testForCreatedBy function', (done) => {\n    redFlagValidator.testForCreatedBy(1);\n    expect(redFlagValidator.passing).to.equal(true);\n    redFlagValidator.testForCreatedBy('1');\n    expect(redFlagValidator.passing).to.equal(false);\n    expect(redFlagValidator.errMessage).to.equal('Type of createdBy must be a registered user number');\n    done();\n  });\n\n  it('should validate testForType function', (done) => {\n    redFlagValidator.testForType('red-flag');\n    expect(redFlagValidator.passing).to.equal(true);\n    redFlagValidator.testForType('red');\n    expect(redFlagValidator.passing).to.equal(false);\n    expect(redFlagValidator.errMessage).to.equal('Type of record can either be red-flag or intervention');\n    done();\n  });\n\n  it('should validate testForLocation function', (done) => {\n    redFlagValidator.testForLocation('6.524379, 3.379206');\n    expect(redFlagValidator.passing).to.equal(true);\n    redFlagValidator.testForLocation('6.524379 3.379206');\n    expect(redFlagValidator.passing).to.equal(false);\n    expect(redFlagValidator.errMessage).to.equal('Input does not match a Lat Long coordinates');\n    done();\n  });\n\n  it('should validate testForStatus function', (done) => {\n    redFlagValidator.testForStatus('resolved');\n    expect(redFlagValidator.passing).to.equal(true);\n    redFlagValidator.testForStatus('denied');\n    expect(redFlagValidator.passing).to.equal(false);\n    expect(redFlagValidator.errMessage).to.equal('Input does not match any of the recommended status');\n    done();\n  });\n\n  it('should validate testForImages function', (done) => {\n    redFlagValidator.testForImages('https://static.pulse.ng/img/incoming/origs7532087/2036362149-w644-h960/babachir-lawal.jpg');\n    expect(redFlagValidator.passing).to.equal(true);\n    redFlagValidator.testForImages('https://static.pulse.ng/img/incoming/origs7532087/2036362149-w644-h960/babachir-lawal');\n    expect(redFlagValidator.passing).to.equal(false);\n    expect(redFlagValidator.errMessage).to.equal('Input is not a valid image extension');\n    done();\n  });\n\n  it('should validate testForVideos function', (done) => {\n    redFlagValidator.testForVideos('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTVtbtjMiVvbOLVc7dA53s3_st7BjF-wtTxNu8Tq_-5al0IZBId');\n    expect(redFlagValidator.passing).to.equal(true);\n    redFlagValidator.testForVideos(123456);\n    expect(redFlagValidator.passing).to.equal(false);\n    expect(redFlagValidator.errMessage).to.equal('Input must be characters');\n    done();\n  });\n\n  it('should validate testForComment function', (done) => {\n    redFlagValidator.testForComment('$24 billion NNPC contract scam');\n    expect(redFlagValidator.passing).to.equal(true);\n    redFlagValidator.testForComment('Employment scandals in Central Bank of Nigeria (CBN) and Federal Inland Revenue Service (FIRS). Grass Cutting scandal of ex-secretary to the Federal Government ' + '\\n' +\n      'Employment scandals in Central Bank of Nigeria (CBN) and Federal Inland Revenue Service (FIRS). Employment scandals in Central Bank of Nigeria (CBN) and Federal Inland Revenue Service (FIRS).');\n    expect(redFlagValidator.passing).to.equal(false);\n    expect(redFlagValidator.errMessage).to.equal('Comment must be characters not exceeding 300 words');\n    done();\n  });\n\n  it('should validate resetValid function', (done) => {\n    redFlagValidator.resetValid();\n    expect(redFlagValidator.passing).to.equal(true);\n    done();\n  });\n  it('should validate testForEmptyStringInput function', (done) => {\n    const incidents = {\n      createdBy: 2,\n      type: 'intervention',\n      location: '6.524379, 3.379206',\n      status: 'rejected',\n      images: 'https://static.pulse.ng/img/incoming/origs7872357/5196368231-w644-h960/DSuR9f-XUAY9MDF.jpg',\n      videos: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTVtbtjMiVvbOLVc7dA53s3_st7BjF-wtTxNu8Tq_-5al0IZBId',\n      comment: '$24 billion NNPC contract scam'\n    };\n    redFlagValidator.testForEmptyStringInput(incidents);\n    // expect(redFlagValidator.errMessage).to.equal(undefined);\n    expect(redFlagValidator.passing).to.equal(true);\n    redFlagValidator.testForEmptyStringInput({\n      status: ''\n    });\n    expect(redFlagValidator.passing).to.equal(false);\n    expect(redFlagValidator.errMessage).to.equal('Input fields must not be empty');\n    done();\n  });\n});"]}