{"version":3,"sources":["validateRedFlag.js"],"names":["locationRegex","RedFlagValidator","passing","errMessage","createdBy","type","includes","location","test","status","images","videos","comment","length","incidents","check","Object","values","every","data","resetValid","testForCreatedBy","testForType","testForLocation","testForStatus","testForImages","testForVideos","testForComment","testForEmptyStringInput","obj","err"],"mappings":"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","file":"validateRedFlag.js","sourceRoot":"/home/dubby/Documents/andelaBootcamp/iReporter/iReporter/dummyApi/Helpers","sourcesContent":["const locationRegex = /^([-+]?\\d{1,2}([.]\\d+)?),\\s*([-+]?\\d{1,3}([.]\\d+)?)$/;\n\nexport class RedFlagValidator {\n  /**\n   * @description Validate red-flag input\n   *\n   * @constructor\n   * @param {String} request\n   * @param {Object} response\n   *\n   * @returns {Object} Object\n   */\n  constructor() {\n    this.passing = true;\n    this.errMessage;\n  }\n\n  /** @function testForCreatedBy\n   *  @param {number}\n   *\n   * @returns {boolean}\n   */\n\n  testForCreatedBy(createdBy) {\n    if (typeof createdBy !== 'number') {\n      this.passing = false;\n      this.errMessage = 'Type of createdBy must be a registered user number';\n    }\n  }\n  /** @function testForType\n   *  @param {string}\n   *\n   * @returns {boolean}\n   */\n\n  testForType(type) {\n    if (typeof type !== 'string' || !type.includes('red-flag') && !type.includes('intervention')) {\n      this.passing = false;\n      this.errMessage = 'Type of record can either be red-flag or intervention';\n    }\n  }\n\n  /** @function testForLocation\n   *  @param {string}\n   *\n   * @returns {boolean}\n   */\n  testForLocation(location) {\n    if (typeof location !== 'string' || !locationRegex.test(location)) {\n      this.passing = false;\n      this.errMessage = 'Input does not match a Lat Long coordinates';\n    }\n  }\n\n  /** @function testForStatus\n   *  @param {string}\n   *\n   * @returns {boolean}\n   */\n  testForStatus(status) {\n    if (typeof status !== 'string' || !status.includes('draft') && !status.includes('under investigation') && !status.includes('resolved') && !status.includes('rejected')) {\n      this.passing = false;\n      this.errMessage = 'Input does not match any of the recommended status';\n    }\n  }\n\n  /** @function testForImages\n   *  @param {string}\n   *\n   * @returns {boolean}\n   */\n  testForImages(images) {\n    if (typeof images !== 'string' || !images.includes('.jpg') && !images.includes('.png') && !images.includes('.jpeg')) {\n      this.passing = false;\n      this.errMessage = 'Input is not a valid image extension';\n    }\n  }\n\n  /** @function testForVideos\n   *  @param {string}\n   *\n   * @returns {boolean}\n   */\n  testForVideos(videos) {\n    if (typeof videos !== 'string') {\n      this.passing = false;\n      this.errMessage = 'Input must be characters';\n    }\n  }\n\n  /** @function testForComment\n   *  @param {string}\n   *\n   * @returns {boolean}\n   */\n  testForComment(comment) {\n    if (typeof comment !== 'string' || comment.length > 300) {\n      this.passing = false;\n      this.errMessage = 'Comment must be characters not exceeding 300 words';\n    //   return {\n    //     passing: false,\n    //     errMessage: \"something\",\n    //   }\n    // }\n    // return {\n    //   passing: true,\n    //   errMessage: null\n    }\n  }\n\n  /** @function resetValid\n   *\n   * @returns {boolean}\n   */\n  resetValid() {\n    this.passing = true;\n    this.errMessage = '';\n  }\n\n  /** @function testForType\n   *  @param {object}\n   *\n   * @returns {boolean}\n   */\n  testForEmptyStringInput(incidents) {\n    let check = Object.values(incidents);\n    check = check.every(data => data !== '');\n    if (!check) {\n      this.passing = false;\n      this.errMessage = 'Input fields must not be empty';\n    }\n  }\n\n  testRedFlag(incidents) {\n    this.resetValid();\n    this.testForCreatedBy(incidents.createdBy);\n    this.testForType(incidents.type);\n    this.testForLocation(incidents.location);\n    this.testForStatus(incidents.status);\n    this.testForImages(incidents.images);\n    this.testForVideos(incidents.videos);\n    this.testForComment(incidents.comment);\n    this.testForEmptyStringInput(incidents);\n    const obj = {\n      passing: this.passing,\n      err: this.errMessage\n    };\n    return obj;\n  }\n}\n\nexport default RedFlagValidator;"]}