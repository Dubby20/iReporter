{"version":3,"sources":["redFlagController.js"],"names":["red_Flag_Validator","RedFlagValidator","RedFlagControllers","request","response","result","testRedFlag","body","passing","status","json","error","err","postRedFlag","id","incidents","length","createdOn","Date","createdBy","type","location","images","videos","comment","userId","map","users","find","item","console","log","push","data","message","getId","parseInt","params","Number"],"mappings":"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","file":"redFlagController.js","sourceRoot":"/home/dubby/Documents/andelaBootcamp/iReporter/iReporter/dummyApi/controllers","sourcesContent":["import incidents from '../models/redFlag';\nimport users from '../models/users';\nimport {\n  RedFlagValidator\n} from '../Helpers/validateRedFlag';\n\n/**\n * Creates a new redFlagValidator.\n * @class redFlagValidator\n */\n\nconst red_Flag_Validator = new RedFlagValidator();\nclass RedFlagControllers {\n  /**\n   * Creates a red-flag\n   * * @api {post} /api/user Create red-flag\n   *\n   * @param {object} request - Request object\n   * @param {object} response - Response object\n\n   * @returns {json} created object\n   * @memberof redFlagControllers\n   */\n\n  static createRedFlag(request, response) {\n    const result = red_Flag_Validator.testRedFlag(request.body);\n    if (!result.passing) {\n      return response.status(400).json({\n        status: 400,\n        error: result.err\n      });\n    }\n    const postRedFlag = {\n      id: incidents.length + 1,\n      createdOn: new Date(),\n      createdBy: request.body.createdBy,\n      type: request.body.type,\n      location: request.body.location,\n      status: request.body.status,\n      images: request.body.images,\n      videos: request.body.videos,\n      comment: request.body.comment\n    };\n    const userId = incidents.map(item => users.find(id => item.createdBy == id.id));\n    console.log(userId);\n    incidents.createdBy = userId;\n    if (!userId) {\n      return response.status(404).json({\n        status: 404,\n        error: 'The userId is not found'\n      });\n    }\n    incidents.push(postRedFlag);\n    return response.status(201).json({\n      status: 201,\n      data: [{\n        id: postRedFlag.id,\n        // incidents,\n        message: 'Created red-flag record'\n      }]\n    });\n  }\n\n  /**\n   * Gets all red-flag records\n   * @param {object} request Request object\n   * @param {object} response Response object\n   *\n   * @returns {json} List of all incidents array\n   * @memberof RedFlagControllers\n   */\n\n  static getAllRedFlag(request, response) {\n    if (!incidents) {\n      return response.status(404).json({\n        status: 404,\n        error: 'No red-flag record found'\n      });\n    }\n    return response.status(200).json({\n      status: 200,\n      data: [{\n        incidents,\n        message: 'All red-flag records retrieved successfully'\n      }]\n    });\n  }\n\n   /**\n   * Gets a specific red-flag record\n   * @param {object} request Request object\n   * @param {object} response Response object\n   *\n   * @returns {json} List of a specific red-flag record\n   * @memberof RedFlagControllers\n   */\n\n  static getRedFlagId(request, response) {\n    const getId = incidents.find(item => item.id === parseInt(request.params.id, 10));\n    if (!Number(request.params.id)) {\n      return response.status(400).json({\n        status: 400,\n        message: 'The given id is not a number'\n      });\n    }\n    if (!getId) {\n      return response.status(404).json({\n        status: 404,\n        message: 'The red-flag record with the given ID was not found'\n      });\n    }\n    return response.status(200).json({\n      status: 200,\n      getId,\n      message: 'The given red-flag id retrieved successfullly'\n    });\n  }\n}\n\n\nexport default RedFlagControllers;"]}