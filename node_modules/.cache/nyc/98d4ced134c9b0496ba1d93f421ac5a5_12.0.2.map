{"version":3,"sources":["redFlagController.js"],"names":["red_Flag_Validator","RedFlagValidator","RedFlagControllers","request","response","result","testRedFlag","body","passing","status","json","error","err","postRedFlag","id","incidents","length","createdOn","Date","createdBy","type","location","images","videos","comment","userId","users","find","user","push","data","message","getId","item","parseInt","params","Number","locationRegex","redFlagId","trim","test","locationId","indexOf"],"mappings":"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","file":"redFlagController.js","sourceRoot":"/home/dubby/Documents/andelaBootcamp/iReporter/iReporter/dummyApi/controllers","sourcesContent":["import incidents from '../models/redFlag';\nimport users from '../models/users';\nimport {\n  RedFlagValidator\n} from '../Helpers/validateRedFlag';\n\n/**\n * Creates a new redFlagValidator.\n * @class redFlagValidator\n */\n\nconst red_Flag_Validator = new RedFlagValidator();\nclass RedFlagControllers {\n  /**\n   * Creates a red-flag\n   * * @api {post} /api/user Create red-flag\n   *\n   * @param {object} request - Request object\n   * @param {object} response - Response object\n\n   * @returns {json} created object\n   * @memberof redFlagControllers\n   */\n\n  static createRedFlag(request, response) {\n    const result = red_Flag_Validator.testRedFlag(request.body);\n    if (!result.passing) {\n      return response.status(400).json({\n        status: 400,\n        error: result.err\n      });\n    }\n    const postRedFlag = {\n      id: incidents.length + 1,\n      createdOn: new Date(),\n      createdBy: request.body.createdBy,\n      type: request.body.type,\n      location: request.body.location,\n      status: request.body.status,\n      images: request.body.images,\n      videos: request.body.videos,\n      comment: request.body.comment\n    };\n    const userId = users.find(user => user.id === postRedFlag.createdBy);\n    incidents.createdBy = userId;\n    if (!userId) {\n      return response.status(404).json({\n        status: 404,\n        error: 'The userId is not found'\n      });\n    }\n    incidents.push(postRedFlag);\n    return response.status(201).json({\n      status: 201,\n      data: [{\n        id: postRedFlag.id,\n        message: 'Created red-flag record'\n      }]\n    });\n  }\n\n  /**\n   * Gets all red-flag records\n   * @param {object} request Request object\n   * @param {object} response Response object\n   *\n   * @returns {json} List of all incidents array\n   * @memberof RedFlagControllers\n   */\n\n  static getAllRedFlag(request, response) {\n    if (!incidents) {\n      return response.status(404).json({\n        status: 404,\n        error: 'No red-flag record found'\n      });\n    }\n    return response.status(200).json({\n      status: 200,\n      data: [{\n        incidents,\n        message: 'All red-flag records retrieved successfully'\n      }]\n    });\n  }\n\n  /**\n   * Gets a specific red-flag record\n   * @param {object} request Request object\n   * @param {object} response Response object\n   *\n   * @returns {json} List of a specific red-flag record\n   * @memberof RedFlagControllers\n   */\n\n  static getRedFlagId(request, response) {\n    const getId = incidents.find(item => item.id === parseInt(request.params.id, 10));\n    if (!Number(request.params.id)) {\n      return response.status(400).json({\n        status: 400,\n        error: 'The given id is not a number'\n      });\n    }\n    if (!getId) {\n      return response.status(404).json({\n        status: 404,\n        error: 'The red-flag record with the given ID was not found'\n      });\n    }\n    return response.status(200).json({\n      status: 200,\n      data: [{\n        getId,\n        message: 'The given red-flag id retrieved successfullly'\n      }]\n    });\n  }\n\n  /**\n   * Updates a specific red-flag record location\n   * @param {object} request Request object\n   * @param {object} response Response object\n   *\n   * @returns {json} A specific red-flag record location\n   * @memberof RedFlagControllers\n   */\n  static updateRedFlagLocation(request, response) {\n    const locationRegex = /^([-+]?\\d{1,2}([.]\\d+)?),\\s*([-+]?\\d{1,3}([.]\\d+)?)$/;\n    const redFlagId = incidents.find(item => item.id === parseInt(request.params.id, 10));\n    if (!Number(request.params.id)) {\n      return response.status(400).json({\n        status: 400,\n        error: 'The given id is not a number'\n      });\n    }\n    if (!redFlagId) {\n      return response.status(404).json({\n        status: 404,\n        error: 'The red-flag record with the given ID was not found'\n      });\n    }\n\n    const {\n      location\n    } = request.body;\n    if (!location || location.trim().length < 1) {\n      return response.status(400).json({\n        status: 400,\n        error: 'Please enter a location'\n      });\n    }\n    if (!locationRegex.test(location)) {\n      return response.status(400).json({\n        status: 400,\n        error: 'Please enter a valid location'\n      });\n    }\n    const locationId = incidents.indexOf(redFlagId);\n    redFlagId.locationId = request.body.location;\n    incidents[locationId] = redFlagId;\n    return response.status(200).json({\n      status: 200,\n      data: [{\n        id: redFlagId.id,\n        message: 'Updated red-flag recordâ€™s location'\n      }]\n    });\n  }\n}\n\n\nexport default RedFlagControllers;"]}